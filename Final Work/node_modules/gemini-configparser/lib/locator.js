'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = initLocator;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var CLI_PREFIX = '--';

function initLocator(_ref) {
    var options = _ref.options;
    var env = _ref.env;
    var argv = _ref.argv;
    var _ref$envPrefix = _ref.envPrefix;
    var envPrefix = _ref$envPrefix === undefined ? 'gemini_' : _ref$envPrefix;

    argv = argv.reduce(function (argv, arg) {
        if (!_lodash2['default'].includes(arg, '=')) {
            return argv.concat(arg);
        }
        var parts = arg.split('=');
        var option = parts[0];
        var value = parts.slice(1).join('=');
        return argv.concat(option, value);
    }, []);

    function getNested(option, _ref2) {
        var namePrefix = _ref2.namePrefix;
        var envPrefix = _ref2.envPrefix;
        var cliPrefix = _ref2.cliPrefix;

        return function (subKey) {
            var envName = envPrefix + _lodash2['default'].snakeCase(subKey);
            var cliFlag = cliPrefix + _lodash2['default'].kebabCase(subKey);

            var argIndex = argv.lastIndexOf(cliFlag);
            var subOption = _lodash2['default'].get(option, subKey);
            var newName = namePrefix + '.' + subKey;

            return mkLocator({
                name: newName,
                parent: namePrefix,
                option: subOption,
                envVar: env[envName],
                cliOption: argIndex > -1 ? argv[argIndex + 1] : undefined
            }, {
                namePrefix: newName,
                envPrefix: envName + '_',
                cliPrefix: cliFlag + '-'
            });
        };
    }

    function mkLocator(base, prefixes) {
        return _lodash2['default'].extend(base, {
            nested: getNested(base.option, prefixes),
            resetOption: function resetOption(newOptions) {
                return _lodash2['default'].extend({}, base, {
                    option: newOptions,
                    nested: getNested(newOptions, prefixes)
                });
            }
        });
    }

    return mkLocator({
        name: 'root',
        parent: '',
        option: options,
        envVar: undefined,
        cliOption: undefined
    }, {
        namePrefix: '',
        envPrefix: envPrefix,
        cliPrefix: CLI_PREFIX
    });
}

module.exports = exports['default'];