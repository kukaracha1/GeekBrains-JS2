'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Symbol = require('babel-runtime/core-js/symbol')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.buildLazyObject = buildLazyObject;
exports.forceParsing = forceParsing;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var isLazy = _Symbol('isLazy');

function buildLazyObject(keys, getKeyGetter) {
    var target = _defineProperty({}, isLazy, true);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            defineLazy(target, key, getKeyGetter(key));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return target;
}

function forceParsing(lazyObject) {
    return _lodash2['default'].cloneDeep(lazyObject);
}

function defineLazy(object, key, getter) {
    var defined = false;
    var value = undefined;

    _Object$defineProperty(object, key, {
        get: function get() {
            if (!defined) {
                defined = true;
                value = getter();
                if (_lodash2['default'].isObject(value) && value[isLazy]) {
                    value = forceParsing(value);
                }
            }
            return value;
        },
        enumerable: true
    });
}